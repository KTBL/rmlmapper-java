stages:
  - build
  - docker-build
  - docker-push

build-job:
  stage: build
  image: maven:3.5.0-jdk-8

  variables:
    # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
    # `showDateTime` will show the passed time in milliseconds.
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
    # Postgres
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: "YourSTRONG!Passw0rd"
    # SQLServer
    ACCEPT_EULA: Y
    SA_PASSWORD: "YourSTRONG!Passw0rd"

  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .m2/repository
      
  script:
    - 'mvn $MAVEN_CLI_OPTS test'

  services:
    - postgres:10.4
    - name: microsoft/mssql-server-linux:latest
      alias: sqlserver
    
docker-build-job:
  image: docker:19.03.1
  stage: docker-build
  variables:
    # When using dind service we need to instruct docker, to talk with the
    # daemon started inside of the service. The daemon is available with
    # a network connection instead of the default /var/run/docker.sock socket.
    #
    # The 'docker' hostname is the alias of the service container as described at
    # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
    #
    # Note that if you're using the Kubernetes executor, the variable should be set to
    # tcp://localhost:2375/ because of how the Kubernetes executor connects services
    # to the job container
    # DOCKER_HOST: tcp://localhost:2375/
    #
    # For non-Kubernetes executors, we use tcp://docker:2375/
    DOCKER_HOST: tcp://docker:2375/
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance.
    DOCKER_DRIVER: overlay2
    #
    # This will instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    # Image name
  services:
    - docker:19.03.1-dind
  before_script:
    - docker info
    - apk add --update bash
  script:
    - ./short-tag-name.sh $CI_COMMIT_TAG
    - export IMAGE_TAG=$(./short-tag-name.sh $CI_COMMIT_TAG)
    - export IMAGE_NAME=rmlmapper
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
  only: tags

docker-push-job:
  image: docker:19.03.1
  stage: docker-push
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.1-dind
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - apk add --update bash
  script:
    - export IMAGE_TAG=$(./short-tag-name.sh $CI_COMMIT_TAG)
    - export IMAGE_NAME=rmlmapper
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG 
  only:
    refs:
      - master
      - tags
